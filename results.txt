=========================Bag of Words with count vector============================
---INFO:        <__main__.MultipClassifiers object at 0x7fa376c71f98>   fit KNeighborsClassifier
---INFO:        <__main__.MultipClassifiers object at 0x7fa376c71f98>   score in train set
---INFO:        <__main__.MultipClassifiers object at 0x7fa376c71f98>   !!!RESULT!!in train!KNeighborsClassifier:0.5337993585888956
---INFO:        <__main__.MultipClassifiers object at 0x7fa376c71f98>   fit SVC
---INFO:        <__main__.MultipClassifiers object at 0x7fa376c71f98>   score in train set
---INFO:        <__main__.MultipClassifiers object at 0x7fa376c71f98>   !!!RESULT!!in train!SVC:0.9965423932651835
---INFO:        <__main__.MultipClassifiers object at 0x7fa376c71f98>   fit GaussianNB
---INFO:        <__main__.MultipClassifiers object at 0x7fa376c71f98>   score in train set
---INFO:        <__main__.MultipClassifiers object at 0x7fa376c71f98>   !!!RESULT!!in train!GaussianNB:0.5734365604329525
===================score classifiers---
---INFO:        <__main__.MultipClassifiers object at 0x7fa376c71f98>   Get vectorized data for corpus...
---INFO:        <__main__.MultipClassifiers object at 0x7fa376c71f98>   ======Score category classification====
---INFO:        <__main__.MultipClassifiers object at 0x7fa376c71f98>   score KNeighborsClassifier
---INFO:        <__main__.MultipClassifiers object at 0x7fa376c71f98>   acc=0.3097484867852175
---INFO:        <__main__.MultipClassifiers object at 0x7fa376c71f98>   score SVC
---INFO:        <__main__.MultipClassifiers object at 0x7fa376c71f98>   acc=0.5921275235911124
---INFO:        <__main__.MultipClassifiers object at 0x7fa376c71f98>   score GaussianNB
---INFO:        <__main__.MultipClassifiers object at 0x7fa376c71f98>   acc=0.03842249708635663
defaultdict(<class 'int'>, {'KNeighborsClassifier': 0.30974848678521749, 'SVC': 0.59212752359111243, 'GaussianNB': 0.03842249708635663})

=========================Bag of Words with tfidf vector============================
===================fit classifiers---
---INFO:        <__main__.MultipClassifiers object at 0x7f03e6330978>   Get vectorized data for corpus...
---INFO:        <__main__.MultipClassifiers object at 0x7f03e6330978>   fit KNeighborsClassifier
---INFO:        <__main__.MultipClassifiers object at 0x7f03e6330978>   score in train set
---INFO:        <__main__.MultipClassifiers object at 0x7f03e6330978>   !!!RESULT!!in train!KNeighborsClassifier:0.3626979354580076
---INFO:        <__main__.MultipClassifiers object at 0x7f03e6330978>   fit SVC
---INFO:        <__main__.MultipClassifiers object at 0x7f03e6330978>   score in train set
---INFO:        <__main__.MultipClassifiers object at 0x7f03e6330978>   !!!RESULT!!in train!SVC:0.9995991180597315
---INFO:        <__main__.MultipClassifiers object at 0x7f03e6330978>   fit GaussianNB
---INFO:        <__main__.MultipClassifiers object at 0x7f03e6330978>   score in train set
---INFO:        <__main__.MultipClassifiers object at 0x7f03e6330978>   !!!RESULT!!in train!GaussianNB:0.665088194026859
===================score classifiers---
---INFO:        <__main__.MultipClassifiers object at 0x7f03e6330978>   Get vectorized data for corpus...
---INFO:        <__main__.MultipClassifiers object at 0x7f03e6330978>   ======Score category classification====
---INFO:        <__main__.MultipClassifiers object at 0x7f03e6330978>   score KNeighborsClassifier
---INFO:        <__main__.MultipClassifiers object at 0x7f03e6330978>   acc=0.16989360502274523
---INFO:        <__main__.MultipClassifiers object at 0x7f03e6330978>   score SVC
---INFO:        <__main__.MultipClassifiers object at 0x7f03e6330978>   acc=0.6314899056355502
---INFO:        <__main__.MultipClassifiers object at 0x7f03e6330978>   score GaussianNB
---INFO:        <__main__.MultipClassifiers object at 0x7f03e6330978>   acc=0.04214444152035791
defaultdict(<class 'int'>, {'GaussianNB': 0.042144441520357907, 'SVC': 0.63148990563555019, 'KNeighborsClassifier': 0.16989360502274523})


=================================Doc2Vec, vectorsize 100===========================
---INFO:        <__main__.MultipClassifiers object at 0x7f67a56f7a20>   Get vectorized data for corpus...
---INFO:        <__main__.MultipClassifiers object at 0x7f67a56f7a20>   fit KNeighborsClassifier
---INFO:        <__main__.MultipClassifiers object at 0x7f67a56f7a20>   score in train set
---INFO:        <__main__.MultipClassifiers object at 0x7f67a56f7a20>   !!!RESULT!!in train!KNeighborsClassifier:0.6696983363399479
---INFO:        <__main__.MultipClassifiers object at 0x7f67a56f7a20>   fit SVC
---INFO:        <__main__.MultipClassifiers object at 0x7f67a56f7a20>   score in train set
---INFO:        <__main__.MultipClassifiers object at 0x7f67a56f7a20>   !!!RESULT!!in train!SVC:0.7300811785929044
---INFO:        <__main__.MultipClassifiers object at 0x7f67a56f7a20>   fit GaussianNB
---INFO:        <__main__.MultipClassifiers object at 0x7f67a56f7a20>   score in train set
---INFO:        <__main__.MultipClassifiers object at 0x7f67a56f7a20>   !!!RESULT!!in train!GaussianNB:0.5931549408699138
---INFO:        <__main__.MultipClassifiers object at 0x7f67a56f7a20>   Get vectorized data for corpus...
---INFO:        <__main__.MultipClassifiers object at 0x7f67a56f7a20>   ======Score category classification====
---INFO:        <__main__.MultipClassifiers object at 0x7f67a56f7a20>   score KNeighborsClassifier
---INFO:        <__main__.MultipClassifiers object at 0x7f67a56f7a20>   acc=0.449640963946013
---INFO:        <__main__.MultipClassifiers object at 0x7f67a56f7a20>   score SVC
---INFO:        <__main__.MultipClassifiers object at 0x7f67a56f7a20>   acc=0.5769389826685214
---INFO:        <__main__.MultipClassifiers object at 0x7f67a56f7a20>   score GaussianNB
---INFO:        <__main__.MultipClassifiers object at 0x7f67a56f7a20>   acc=0.5134403549005602
defaultdict(<class 'int'>, {'SVC': 0.57693898266852139, 'KNeighborsClassifier': 0.44964096394601299, 'GaussianNB': 0.51344035490056017})

=================================Doc2Vec, vectorsize 500===========================
---INFO:        <__main__.MultipClassifiers object at 0x7f4ad9191710>   Get vectorized data for corpus...
---INFO:        <__main__.MultipClassifiers object at 0x7f4ad9191710>   fit KNeighborsClassifier
---INFO:        <__main__.MultipClassifiers object at 0x7f4ad9191710>   score in train set
---INFO:        <__main__.MultipClassifiers object at 0x7f4ad9191710>   !!!RESULT!!in train!KNeighborsClassifier:0.2923682100621367
---INFO:        <__main__.MultipClassifiers object at 0x7f4ad9191710>   fit SVC
---INFO:        <__main__.MultipClassifiers object at 0x7f4ad9191710>   score in train set
---INFO:        <__main__.MultipClassifiers object at 0x7f4ad9191710>   !!!RESULT!!in train!SVC:0.947559631188615
---INFO:        <__main__.MultipClassifiers object at 0x7f4ad9191710>   fit GaussianNB
---INFO:        <__main__.MultipClassifiers object at 0x7f4ad9191710>   score in train set
---INFO:        <__main__.MultipClassifiers object at 0x7f4ad9191710>   !!!RESULT!!in train!GaussianNB:0.5699288434556024
---INFO:        <__main__.MultipClassifiers object at 0x7f4ad9191710>   Get vectorized data for corpus...
---INFO:        <__main__.MultipClassifiers object at 0x7f4ad9191710>   ======Score category classification====
---INFO:        <__main__.MultipClassifiers object at 0x7f4ad9191710>   score KNeighborsClassifier
---INFO:        <__main__.MultipClassifiers object at 0x7f4ad9191710>   acc=0.1266588969510132
---INFO:        <__main__.MultipClassifiers object at 0x7f4ad9191710>   score SVC
---INFO:        <__main__.MultipClassifiers object at 0x7f4ad9191710>   acc=0.5411857588631152
---INFO:        <__main__.MultipClassifiers object at 0x7f4ad9191710>   score GaussianNB
---INFO:        <__main__.MultipClassifiers object at 0x7f4ad9191710>   acc=0.45313733599007483
defaultdict(<class 'int'>, {'KNeighborsClassifier': 0.12665889695101321, 'SVC': 0.54118575886311515, 'GaussianNB': 0.45313733599007483})
=================================Doc2Vec, vectorsize 300===========================
??nothing special

=================================Doc2Vec, bag of word vectorsize 100===========================
---INFO:        <__main__.MultipClassifiers object at 0x7f24ae84a400>   Get vectorized data for corpus...
---INFO:        <__main__.MultipClassifiers object at 0x7f24ae84a400>   fit SVC
---INFO:        <__main__.MultipClassifiers object at 0x7f24ae84a400>   score in train set
---INFO:        <__main__.MultipClassifiers object at 0x7f24ae84a400>   !!!RESULT!!in train!SVC:0.801037282020445
---INFO:        <__main__.MultipClassifiers object at 0x7f24ae84a400>   fit GaussianNB
---INFO:        <__main__.MultipClassifiers object at 0x7f24ae84a400>   score in train set
---INFO:        <__main__.MultipClassifiers object at 0x7f24ae84a400>   !!!RESULT!!in train!GaussianNB:0.6733814391661656
---INFO:        <__main__.MultipClassifiers object at 0x7f24ae84a400>   Get vectorized data for corpus...
---INFO:        <__main__.MultipClassifiers object at 0x7f24ae84a400>   ======Score category classification====
---INFO:        <__main__.MultipClassifiers object at 0x7f24ae84a400>   score SVC
---INFO:        <__main__.MultipClassifiers object at 0x7f24ae84a400>   acc=0.6529192826798
---INFO:        <__main__.MultipClassifiers object at 0x7f24ae84a400>   score GaussianNB
---INFO:        <__main__.MultipClassifiers object at 0x7f24ae84a400>   acc=0.5828414602052708
defaultdict(<class 'int'>, {'GaussianNB': 0.58284146020527083, 'SVC': 0.65291928267980004})

=================================Doc2Vec, bag of word vectorsize 100, min count=50===========================
---INFO:        <__main__.MultipClassifiers object at 0x7f41fee89dd8>   Get vectorized data for corpus...
---INFO:        <__main__.MultipClassifiers object at 0x7f41fee89dd8>   fit SVC
---INFO:        <__main__.MultipClassifiers object at 0x7f41fee89dd8>   score in train set
---INFO:        <__main__.MultipClassifiers object at 0x7f41fee89dd8>   !!!RESULT!!in train!SVC:0.7965524153136901
---INFO:        <__main__.MultipClassifiers object at 0x7f41fee89dd8>   fit GaussianNB
---INFO:        <__main__.MultipClassifiers object at 0x7f41fee89dd8>   score in train set
---INFO:        <__main__.MultipClassifiers object at 0x7f41fee89dd8>   !!!RESULT!!in train!GaussianNB:0.6762126678693124
---INFO:        <__main__.MultipClassifiers object at 0x7f41fee89dd8>   Get vectorized data for corpus...
---INFO:        <__main__.MultipClassifiers object at 0x7f41fee89dd8>   ======Score category classification====
---INFO:        <__main__.MultipClassifiers object at 0x7f41fee89dd8>   score SVC
---INFO:        <__main__.MultipClassifiers object at 0x7f41fee89dd8>   acc=0.6552501973758412
---INFO:        <__main__.MultipClassifiers object at 0x7f41fee89dd8>   score GaussianNB
---INFO:        <__main__.MultipClassifiers object at 0x7f41fee89dd8>   acc=0.591450806421294
defaultdict(<class 'int'>, {'GaussianNB': 0.591450806421294, 'SVC': 0.65525019737584123})

=================================Doc2Vec, bag of word vectorsize 100, min count=150===========================
---INFO:        <__main__.MultipClassifiers object at 0x7f0357280940>   Get vectorized data for corpus...
---INFO:        <__main__.MultipClassifiers object at 0x7f0357280940>   fit SVC
---INFO:        <__main__.MultipClassifiers object at 0x7f0357280940>   score in train set
---INFO:        <__main__.MultipClassifiers object at 0x7f0357280940>   !!!RESULT!!in train!SVC:0.795625375826819
---INFO:        <__main__.MultipClassifiers object at 0x7f0357280940>   fit GaussianNB
---INFO:        <__main__.MultipClassifiers object at 0x7f0357280940>   score in train set
---INFO:        <__main__.MultipClassifiers object at 0x7f0357280940>   !!!RESULT!!in train!GaussianNB:0.6688965724594107
---INFO:        <__main__.MultipClassifiers object at 0x7f0357280940>   Get vectorized data for corpus...
---INFO:        <__main__.MultipClassifiers object at 0x7f0357280940>   ======Score category classification====
---INFO:        <__main__.MultipClassifiers object at 0x7f0357280940>   score SVC
---INFO:        <__main__.MultipClassifiers object at 0x7f0357280940>   acc=0.6486710026692732
---INFO:        <__main__.MultipClassifiers object at 0x7f0357280940>   score GaussianNB
---INFO:        <__main__.MultipClassifiers object at 0x7f0357280940>   acc=0.5875408849956766
defaultdict(<class 'int'>, {'SVC': 0.64867100266927324, 'GaussianNB': 0.58754088499567658})

=================================Doc2Vec, combination, nn classifier, vector size= 100, min count=50===========================
train: 75%, test: 63%

=================================Doc2Vec, combination, nn classifier, vector size= 100, min count=50===========================
train: 80, test 66????


=================================Doc2Vec, BoW, tokenize, stopword, vector size= 100, min count=50===========================
tokenize: train 65, test 52
tokenize+stopwords: train 64.7; test 50.7


================================2 related, one not===========
zing new only: 82%; 89%
zing+docbao: 77.85%; FULL train: 83.84
zing+docbao+wiki:77.40%; Full train: 83.78

================================kmeans===========
Clustering...
Homogeneity: 0.619
Completeness: 0.611
V-measure: 0.615
Adjusted Rand-Index: 0.347
Silhouette Coefficient: 0.039

